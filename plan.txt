нарисовать карту на графике -> закинуть туда человечка -> научиться им управлять

Вы должны создать «реалистичное» трехмерное графическое представление внутренней части
лабиринта от первого лица. Вы должны создать это представление, используя принципы Ray-Casting,
упомянутые ранее.

• Вы должны использовать miniLibX. Либо версия, доступная в операционной системе, либо из ее исходников.
Если вы решите работать с исходными текстами, вам нужно будет применить те же правила
для вашей библиотеки libft, что и те, что написаны выше в части общих инструкций.
• Управление вашим окном должно оставаться плавным: переход на другое окно, сворачивание и т. Д.
• Отображать различные текстуры стен (выбор за вами), которые различаются в зависимости от того,
с какой стороны стена смотрит (север, юг, восток, запад).

• Ваша программа должна иметь возможность отображать элемент (спрайт) вместо стены.
• Ваша программа должна иметь возможность устанавливать два разных цвета пола и потолка.
• В случае, если Глубокая мысль однажды увидит ваш проект, ваша программа должна сохранить первое
визуализированное изображение в формате bmp, когда его вторым аргументом является «––save».
• Если второй аргумент не указан, программа отображает изображение в окне и соблюдает следующие правила:
◦ Клавиши со стрелками влево и вправо на клавиатуре должны позволять вам смотреть в
лабиринт влево и вправо.
◦ Клавиши W, A, S и D должны позволять перемещать точку обзора через лабиринт.
◦ Нажатие ESC должно закрыть окно и полностью выйти из программы.
◦ Щелчок по красному крестику на рамке окна должен закрыть окно и полностью выйти из программы.
◦ Если заявленный размер экрана на карте больше, чем разрешение экрана, размер окна будет
установлен в зависимости от текущего разрешения экрана.
◦ Настоятельно рекомендуется использовать изображения minilibX.

Ваша программа должна принимать в качестве первого аргумента файл описания сцены с расширением .cub.
◦ Карта должна состоять только из 4 возможных символов: 0 для пустого
места, 1 для стены, 2 для предмета и N, S, E или W для начальной позиции игрока и его ориентации.
Это простая действительная карта:
111111
100101
102001
1100N1
111111
◦ Карта должна быть закрыта / окружена стенами, в противном случае программа должна выдать ошибку.
◦ За исключением содержимого карты, каждый тип элемента может
быть разделен одной или несколькими пустыми строками.
◦ За исключением содержимого карты, которое всегда должно
быть последним, каждый тип элемента может быть установлен в файле в любом порядке.
◦ За исключением карты, каждый тип информации из элемента
может быть разделен одним или несколькими пробелами.
◦ Карта должна быть проанализирована так, как она выглядит
в файле. Пробелы - это допустимая часть карты, и вам решать.
Вы должны иметь возможность анализировать любую карту, если она соответствует правилам карт.
◦ Информация о каждом элементе (кроме карты) - это сначала идентификатор
типа (состоящий из одного или двух символов), за которым следует вся конкретная
информация для каждого объекта в строгом порядке, например:
∗ Разрешение:
R 1920 1080
· Идентификатор: R
· X размер рендеринга
· Y размер рендеринга
∗ Северная текстура:
NO ./path_to_the_north_texture
· Идентификатор: NO
· Путь на север
∗ Южная текстура:
SO ./path_to_the_south_texture
· Идентификатор: SO
· Путь на юг
∗ Западная текстура:
WE ./path_to_the_west_texture
· Идентификатор: WE
· Путь на западный берег
∗ Текстура Востока:
EA ./path_to_the_east_texture
· Идентификатор: EA
· Путь на восток
* Текстура спрайта:
S ./path_to_the_sprite_texture
· Идентификатор: S
· Путь к текстуре спрайта
∗ Цвет пола:
F 220,100,0
· Идентификатор: F
· Цвета R, G, B в диапазоне [0,255]: 0, 255, 255
∗ Цвет потолка:
С 225,30,0
· Идентификатор: C
· Цвета R, G, B в диапазоне [0,255]: 0, 255, 255
◦ Пример обязательной части с минималистичной сценой .cub:

R 1920 1080
NO ./path_to_the_north_texture
SO ./path_to_the_south_texture
WE ./path_to_the_west_texture
EA ./path_to_the_east_texture
S ./path_to_the_sprite_texture
F 220,100,0
C 225,30,0
        1111111111111111111111111
        1000000000110000000000001
        1011000001110000002000001
        1001000000000000000000001
111111111011000001110000000000001
100000000011000001110111111111111
11110111111111011100000010001
11110111111111011101010010001
11000000110101011100000010001
10002000000000001100000010001
10000000000000001101010010001
11000001110101011111011110N0111
11110111 1110101 101111010001
11111111 1111111 111111111111

◦ Если в файле обнаружена какая-либо неправильная конфигурация, программа должна завершиться должным образом и вернуть «Ошибка \ n» с последующим явным сообщением об ошибке
по вашему выбору.

//настройка парсера, мейкфайл и луч, выходящий из пересечений стен, линии на стыке стен(из-за того, что расстояния по верт и гориз одинаковы, но по верт больше, поэтому он рисует текстуру, которая должна
рисоваться на северной части), у мейкфайла не выводяться файлы .о

     1111111111
    11222222221111
111112222222222221111
122222222222122222221
122222222221222221111
11111122222222222221
     1111111222222N1
           111111221
                1111


Список бонусов:
• Столкновения со стенами.
• Скайбокс.
• Текстура пола и / или потолка.
• HUD.
• Умение смотреть вверх и вниз.
• Прыгайте или приседайте.
• Эффект тени, связанный с расстоянием.
• Шкала жизни.
• Больше предметов в лабиринте.
• Столкновения объектов.
• Зарабатывать очки и / или терять жизнь, собирая предметы / ловушки.
• Двери, которые могут открываться и закрываться.
• Секретные двери.
• Анимация выстрела или анимированный спрайт.
• Несколько уровней.
• Звуки и музыка.
• Поверните точку обзора с помощью мыши.
• Оружие и плохие парни для борьбы!

Чтобы заработать все бонусные баллы, вам необходимо подтвердить
как минимум 14 из них, поэтому выбирайте с умом, но будьте осторожны,
чтобы не тратить зря время!

Вам разрешается использовать другие функции для завершения бонусной части,
если их использование оправдано во время вашей оценки. Вы также можете изменить
ожидаемый формат файла сцены в соответствии с вашими потребностями. Быть умным!
